generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model conversations {
  id              String     @id
  created_at      DateTime   @default(now())
  updated_at      DateTime
  session_id      String
  customer_id     String?
  status          String     @default("active")
  summary         String?
  store_id        String
  last_message_at DateTime?
  session_type    String     @default("anonymous")
  stores          stores     @relation(fields: [store_id], references: [id], onDelete: Cascade)
  messages        messages[]

  @@unique([session_id, store_id])
  @@index([store_id, session_type])
  @@index([store_id, status])
  @@schema("public")
}

model messages {
  id              String        @id
  created_at      DateTime      @default(now())
  role            String
  content         String
  metadata        Json?
  conversation_id String
  conversations   conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  @@schema("public")
}

model products {
  id                 String    @id
  created_at         DateTime  @default(now())
  updated_at         DateTime
  shopify_product_id String
  title              String
  description        String?
  handle             String?
  product_type       String?
  vendor             String?
  tags               String[]
  status             String    @default("active")
  price_min          Decimal?
  price_max          Decimal?
  image_url          String?
  image_urls         String[]
  total_inventory    Int?
  available_for_sale Boolean   @default(true)
  embedding          Float[]
  embedding_model    String?
  last_embedded      DateTime?
  search_metadata    Json?
  last_synced        DateTime?
  sync_version       Int       @default(1)
  sync_metadata      Json?
  store_id           String
  stores             stores    @relation(fields: [store_id], references: [id], onDelete: Cascade)

  @@unique([store_id, shopify_product_id])
  @@index([store_id, available_for_sale])
  @@index([store_id, status])
  @@schema("public")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)

  @@map("session")
  @@schema("public")
}

model stores {
  id                   String          @id
  created_at           DateTime        @default(now())
  updated_at           DateTime
  store_name           String
  shopify_domain       String          @unique
  shopify_access_token String
  is_active            Boolean         @default(true)
  ai_config            Json?           @default("{}")
  sync_config          Json?           @default("{}")
  feature_flags        Json?           @default("{}")
  ui_config            Json?           @default("{}")
  conversations        conversations[]
  products             products[]

  @@schema("public")
}
